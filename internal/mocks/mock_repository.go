// Code generated by MockGen. DO NOT EDIT.
// Source: tsarka/internal/repository/counter_repository (interfaces: CounterRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCounterRepository is a mock of CounterRepository interface.
type MockCounterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCounterRepositoryMockRecorder
}

// MockCounterRepositoryMockRecorder is the mock recorder for MockCounterRepository.
type MockCounterRepositoryMockRecorder struct {
	mock *MockCounterRepository
}

// NewMockCounterRepository creates a new mock instance.
func NewMockCounterRepository(ctrl *gomock.Controller) *MockCounterRepository {
	mock := &MockCounterRepository{ctrl: ctrl}
	mock.recorder = &MockCounterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterRepository) EXPECT() *MockCounterRepositoryMockRecorder {
	return m.recorder
}

// Decrement mocks base method.
func (m *MockCounterRepository) Decrement(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrement", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrement indicates an expected call of Decrement.
func (mr *MockCounterRepositoryMockRecorder) Decrement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrement", reflect.TypeOf((*MockCounterRepository)(nil).Decrement), arg0, arg1)
}

// GetValue mocks base method.
func (m *MockCounterRepository) GetValue(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockCounterRepositoryMockRecorder) GetValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockCounterRepository)(nil).GetValue), arg0)
}

// Increment mocks base method.
func (m *MockCounterRepository) Increment(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increment indicates an expected call of Increment.
func (mr *MockCounterRepositoryMockRecorder) Increment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockCounterRepository)(nil).Increment), arg0, arg1)
}
